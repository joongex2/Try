{"version":3,"sources":["bin.png","logo.svg","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoList","state","todo","inputField","fetchTodoList","a","axios","get","httpResponse","setState","data","add","post","task","changeTask","id","inputTask","prompt","put","removeTask","delete","this","style","width","height","margin","backgroundColor","display","flexDirection","justifyContent","map","value","color","onClick","src","Bin","left","position","onChange","e","target","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,iC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,6MCItBC,E,4MACjBC,MAAQ,CACJC,KAAM,GACNC,WAAY,I,EAOhBC,c,sBAAgB,4BAAAC,EAAA,sEACeC,IAAMC,IAAI,qDADzB,OACNC,EADM,OAEZ,EAAKC,SAAS,CAAEP,KAAMM,EAAaE,OAFvB,2C,EAKhBC,I,sBAAM,sBAAAN,EAAA,sEACIC,IAAMM,KAAK,oDAAqD,CAAEC,KAAM,EAAKZ,MAAME,aADvF,OAEF,EAAKC,gBAFH,2C,EAKNU,W,uCAAa,WAAOC,GAAP,eAAAV,EAAA,yDACHW,EAAYC,OAAO,wBADhB,iEAGHX,IAAMY,IAAN,4DAA+DH,GAAM,CAAEF,KAAMG,IAH1E,OAIT,EAAKZ,gBAJI,2C,wDAObe,W,uCAAa,WAAOJ,GAAP,SAAAV,EAAA,sEACHC,IAAMc,OAAN,4DAAkEL,IAD/D,OAET,EAAKX,gBAFI,2C,wHApBTiB,KAAKjB,kB,+BAyBC,IAAD,OACL,OACI,yBAAKkB,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,OAAQ,SAAUC,gBAAiB,eAC9E,yBAAKJ,MAAO,CAAEK,QAAS,OAAQC,cAAe,SAAUC,eAAgB,kBACpE,6BACI,wBAAIP,MAAO,CAAEI,gBAAiB,SAA9B,YACA,4BACKL,KAAKpB,MAAMC,KAAK4B,KAAI,SAACC,GAAD,OACjB,wBAAIT,MAAO,CAAEU,MAAO,UAChB,0BAAMC,QAAS,kBAAM,EAAKnB,WAAWiB,EAAMhB,MAAMgB,EAAMlB,MACvD,yBAAKoB,QAAS,kBAAK,EAAKd,WAAWY,EAAMhB,KAAKmB,IAAKC,IAAKb,MAAO,CAACC,MAAM,OAAQa,KAAM,MAAOC,SAAU,oBAIrH,6BACI,2BAAOC,SAAU,SAACC,GAAD,OAAO,EAAK9B,SAAS,CAAEN,WAAYoC,EAAEC,OAAOT,SACzDA,MAAOV,KAAKpB,MAAME,aACtB,4BAAQ8B,QAAS,kBAAM,EAAKtB,QAA5B,c,GAjDc8B,aCWvBC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3eb5bc54.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bin.291f3696.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport axios from 'axios'\nimport Bin from \"../bin.png\"\n\nexport default class TodoList extends Component {\n    state = {\n        todo: [],\n        inputField: \"\"\n    }\n\n    componentDidMount() {\n        this.fetchTodoList();\n    }\n\n    fetchTodoList = async () => {\n        const httpResponse = await axios.get(\"https://pure-hamlet-62268.herokuapp.com/todo-list\");\n        this.setState({ todo: httpResponse.data });\n    }\n\n    add = async () => {\n        await axios.post(\"https://pure-hamlet-62268.herokuapp.com/todo-list\", { task: this.state.inputField });\n        this.fetchTodoList();\n    }\n\n    changeTask = async (id) => {\n        const inputTask = prompt(\"Enter your new task:\");\n        if (!inputTask) return;\n        await axios.put(`https://pure-hamlet-62268.herokuapp.com/todo-list/${id}`, { task: inputTask });\n        this.fetchTodoList();\n    }\n\n    removeTask = async (id) => {\n        await axios.delete(`https://pure-hamlet-62268.herokuapp.com/todo-list/${id}`);\n        this.fetchTodoList();\n    } \n\n    render() {\n        return (\n            <div style={{ width: \"400px\", height: \"400px\", margin: \"0 auto\", backgroundColor: \"whitesmoke\" }}>\n                <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\" }}>\n                    <div>\n                        <h3 style={{ backgroundColor: \"grey\" }}>TodoList</h3>\n                        <ul>\n                            {this.state.todo.map((value) =>\n                                <li style={{ color: 'black' }}>\n                                    <span onClick={() => this.changeTask(value.id)}>{value.task}</span>\n                                    <img onClick={()=> this.removeTask(value.id)} src={Bin} style={{width:\"15px\", left: \"5px\", position: \"relative\"}}></img>\n                                </li>)}\n                        </ul>\n                    </div>\n                    <div>\n                        <input onChange={(e) => this.setState({ inputField: e.target.value })}\n                            value={this.state.inputField}></input>\n                        <button onClick={() => this.add()}>add</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TodoList from './components/TodoList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TodoList />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}